pipeline {
    agent {
        docker {
            image 'gradle:jdk8-alpine'
//            args '"-v ${JENKINS_HOME}/gradle:/home/gradle/.gradle"'
        }
    }
    parameters {
        string(
            name: 'sonar_server',
            defaultValue: 'http://10.1.0.175:9000',
            description: 'SonarQube server'
        )
    }
    stages {
        stage('SCM') {
            steps {
                script {
                    dir('app') {
                        git(url: "https://github.com/hoabka/gs-gradle.git", branch: "dev")
                    }
                }
            }
        }
        stage('build') {
            steps {
                sh 'cd app/complete && /opt/gradle/bin/gradle build'
            }
        }
        stage('sonar-scanner') {
            steps {
                script {
                    def sonarqubeScannerHome = tool name: 'sonar', type: 'hudson.plugins.sonar.SonarRunnerInstallation'
                    withSonarQubeEnv('sonar') {
                        sh "${sonarqubeScannerHome}/bin/sonar-scanner -e -Dsonar.host.url=${sonar_server} -Dsonar.login=sonarLogin -Dsonar.projectName=gs-gradle -Dsonar.projectVersion=${env.BUILD_NUMBER} -Dsonar.projectKey=GS -Dsonar.sources=app/complete/src/main/ -Dsonar.tests=app/complete/src/test/ -Dsonar.language=java -Dsonar.java.binaries=."
                    }
                }
            }
        }
        stage("Quality Gate") {
            steps {
                timeout(time: 1, unit: 'HOURS') {
                    // Parameter indicates whether to set pipeline to UNSTABLE if Quality Gate fails
                    // true = set pipeline to UNSTABLE, false = don't
                    waitForQualityGate abortPipeline: true
                }
            }
        }
    }
}